class Solution {
   /* public int findShortestSubArray(int[] nums) 
    {
       
        int start=0;
        int end=0;
        int temp=0;
        for(int i=0;i<nums.length-1;i++)
        {
            int count=0;
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]==nums[j])
                {
                    count++;
                    if(temp<count)
                    {
                        start=i;
                        end=j;
                        temp=count;
                    }
                    else if(temp==count)
                    {
                        if((j-i)<(end-start))
                        {
                            start=i;
                            end=j;
                        }
                    }
                }
            }
        }
        return ((end+1)-start);
    }*/
    public int findShortestSubArray(int[] nums) {
    Map<Integer, Integer> numToFreq = new HashMap<Integer, Integer>();
    Map<Integer, Integer> numToFirst = new HashMap<Integer, Integer>();

    int freq = 0, result = 0;
    for(int i = 0; i < nums.length; i++) {
        if( !numToFreq.containsKey(nums[i]) ) {
            numToFreq.put(nums[i], 1);
            numToFirst.put(nums[i], i);
            if( freq == 0 ) {
                freq = 1;
                result = 1;
            }
        }
        else {
            int newFreq = numToFreq.get(nums[i]) + 1;
            numToFreq.put(nums[i], newFreq);        
            if( newFreq > freq ) {
                freq = newFreq;
                result = i - numToFirst.get(nums[i]) + 1;
            }
            else if( newFreq == freq ) {
                result = Math.min(result, i - numToFirst.get(nums[i]) + 1);
            }
        }
    }

    return result;
}
}


/*
Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
*/